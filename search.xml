<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown 编辑器语法指南</title>
      <link href="/2020/03/26/markdown-bian-ji-qi-yu-fa-zhi-nan/"/>
      <url>/2020/03/26/markdown-bian-ji-qi-yu-fa-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-编辑器语法指南"><a href="#Markdown-编辑器语法指南" class="headerlink" title="Markdown 编辑器语法指南"></a>Markdown 编辑器语法指南</h1><h2 id="基本技巧"><a href="#基本技巧" class="headerlink" title="基本技巧"></a>基本技巧</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 <code>function_name()</code> 实现<br>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>$(document).ready(function () {    alert('hello world');});</code></pre><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>文章内容较多时，可以用标题分段：</p><pre><code>标题1======标题2-----## 大标题 ##### 小标题 ###</code></pre><h3 id="粗斜体"><a href="#粗斜体" class="headerlink" title="粗斜体"></a>粗斜体</h3><p><code>*斜体文本*    _斜体文本_</code><br><code>**粗体文本**    __粗体文本__</code><br><code>***粗斜体文本***    ___粗斜体文本___</code></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="常用链接方法"><a href="#常用链接方法" class="headerlink" title="常用链接方法"></a>常用链接方法</h4><p><code>文字链接 [链接名称](http://链接网址)</code><br><code>网址链接 &lt;http://链接网址&gt;</code></p><h4 id="高级链接技巧"><a href="#高级链接技巧" class="headerlink" title="高级链接技巧"></a>高级链接技巧</h4><p>这个链接用<a href="http://www.google.com/" target="_blank" rel="noopener">1</a>作为网址变量.<br>这个链接用<a href="http://www.yahoo.com/" target="_blank" rel="noopener">yahoo</a>作为网址变量 <a href="http://www.yahoo.com/" target="_blank" rel="noopener">Yahoo!</a>.<br>然后在文档的结尾为变量赋值（网址）</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="普通无序列表"><a href="#普通无序列表" class="headerlink" title="普通无序列表"></a>普通无序列表</h4><ul><li>列表文本前使用 [减号+空格]</li></ul><ul><li>列表文本前使用 [加号+空格]</li></ul><ul><li>列表文本前使用 [星号+空格]</li></ul><h4 id="普通有序列表"><a href="#普通有序列表" class="headerlink" title="普通有序列表"></a>普通有序列表</h4><ol><li>列表前使用 [数字+空格]</li><li>我们会自动帮你添加数字</li><li>不用担心数字不对，显示的时候我们会自动把这行的 4 纠正为 3</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><ol><li><p>列出所有元素：</p><ul><li>无序列表元素 A<ol><li>元素 A 的有序子列表</li></ol></li><li>前面加四个空格</li></ul></li><li><p>列表里的多段换行：<br> 前面必须加四个空格，<br> 这样换行，整体的格式不会乱</p></li><li><p>列表里引用：</p><blockquote><p>前面空一行<br>仍然需要在 &gt;  前面加四个空格</p></blockquote></li><li><p>列表里代码段：<br> 前面四个空格，之后按代码语法 ``` 书写</p></li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="普通引用"><a href="#普通引用" class="headerlink" title="普通引用"></a>普通引用</h4><blockquote><p>引用文本前使用 [大于号+空格]<br>折行可以不加，新起一行都要加上哦</p></blockquote><h4 id="引用里嵌套引用"><a href="#引用里嵌套引用" class="headerlink" title="引用里嵌套引用"></a>引用里嵌套引用</h4><blockquote><p>最外层引用</p><blockquote><p>多一个 &gt; 嵌套一层引用</p><blockquote><p>可以嵌套很多层</p></blockquote></blockquote></blockquote><h4 id="引用里嵌套列表"><a href="#引用里嵌套列表" class="headerlink" title="引用里嵌套列表"></a>引用里嵌套列表</h4><blockquote><ul><li>这是引用里嵌套的一个列表</li><li>还可以有子列表<ul><li>子列表需要从 - 之后延后四个空格开始</li></ul></li></ul></blockquote><h4 id="引用里嵌套代码块"><a href="#引用里嵌套代码块" class="headerlink" title="引用里嵌套代码块"></a>引用里嵌套代码块</h4><blockquote><pre><code>同样的，在前面加四个空格形成代码块</code></pre><pre><code>或者使用 ``` 形成代码块</code></pre></blockquote><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>跟链接的方法区别在于前面加了个感叹号 !<br><img src="https://cdn.jsdelivr.net/gh/gkm0120/CDN/images/timg.jpg" data-original="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1585213994621&amp;di=2d6e986837fe3e00628807799adef217&amp;imgtype=0&amp;src=http%3A%2F%2Ft7.baidu.com%2Fit%2Fu%3D3204887199%2C3790688592%26fm%3D79%26app%3D86%26f%3DJPEG%3Fw%3D4610%26h%3D2968" alt="图片名称"><br>也可以像网址那样对图片网址使用变量<br>这个链接用<a href="http://www.google.com/" target="_blank" rel="noopener">1</a>作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">Google</a>.<br>然后在文档的结尾位变量赋值（网址）</p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>如果是要起一个新段落，只需要空出一行即可。</p><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>可以新起一行输入三个减号-。当前后都有段落时，请空出一行：<br>前面的段落</p><hr><p>后面的段落</p><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="行内-HTML-元素"><a href="#行内-HTML-元素" class="headerlink" title="行内 HTML 元素"></a>行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括<code>&lt;kdb&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code></p><h4 id="键位显示"><a href="#键位显示" class="headerlink" title="键位显示"></a>键位显示</h4><p>使用 <code>&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt;</code> 重启电脑</p><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p><code>&lt;pre&gt;&lt;/pre&gt;</code></p><h4 id="粗斜体-1"><a href="#粗斜体-1" class="headerlink" title="粗斜体"></a>粗斜体</h4><p><code>&lt;b&gt; Markdown*加粗* &lt;/b&gt;</code></p><h4 id="符号转义"><a href="#符号转义" class="headerlink" title="符号转义"></a>符号转义</h4><p>如果你的描述中需要用到 markdown 的符号，比如 _ # * 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 _ # * 进行避免。<br><code>\_不想这里的文本变斜体\_</code><br><code>\*\*不想这里的文本被加粗\*\*</code></p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>支持 jsfiddle、gist、runjs、优酷视频，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p><p>http://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/<br><a href="https://gist.github.com/{gist_id}" target="_blank" rel="noopener">https://gist.github.com/{gist_id}</a><br><a href="http://runjs.cn/detail/{id}" target="_blank" rel="noopener">http://runjs.cn/detail/{id}</a><br><a href="http://v.youku.com/v_show/id_{video_id}.html" target="_blank" rel="noopener">http://v.youku.com/v_show/id_{video_id}.html</a></p><p>公式<br>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><p>$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. $$</p><p>$$<br>x \href{why-equal.html}{=} y^2 + 1<br>$$<br>同时也支持 HTML 属性，如：<br>$$ (x+1)^2 = \class{hidden}{(x+1)(x+1)} $$</p><p>$$<br>(x+1)^2 = \cssId{step1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">https://segmentfault.com/markdown</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 文本编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码裁剪算法实现</title>
      <link href="/2020/03/25/bian-ma-cai-jian-suan-fa-shi-xian/"/>
      <url>/2020/03/25/bian-ma-cai-jian-suan-fa-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="Cohen-Sutherland编码裁剪算法"><a href="#Cohen-Sutherland编码裁剪算法" class="headerlink" title="Cohen-Sutherland编码裁剪算法"></a>Cohen-Sutherland编码裁剪算法</h2><h4 id="算法的基本思想是对每条直线段分三种情况处理："><a href="#算法的基本思想是对每条直线段分三种情况处理：" class="headerlink" title="算法的基本思想是对每条直线段分三种情况处理："></a>算法的基本思想是对每条直线段分三种情况处理：</h4><ol><li>若点p1和p2完全在裁剪窗口内，则保留该直线</li><li>若点p1(x1,y1)和 p2(x2,y2) 均在窗口外，且满足下列四个条件之一，就可以舍弃这条直线了：</li><li>如果直线段既不满足保留的条件，也不满足舍弃的条件？那么需要对直线段按交点进行分段，分段后判断直线是保留还是舍弃。（大部分直线都是这种情况)</li></ol><h3 id="1．区域码及其建立"><a href="#1．区域码及其建立" class="headerlink" title="1．区域码及其建立"></a>1．区域码及其建立</h3><p>  Cohen-Sutherland直线裁剪算法的核心是把所有直线的端点均分配一个表示其相对位置的4位二进制代码。此代码称为区域码。<br>区域码按照端点与窗口边界的相对位置编码，即区域码的4位分别代表端点位于窗口的上、下、左、右。<br>区域码从右到左的各位所代表的坐标区如下所示：<br>位             4    3     2    1<br>坐标区         上   下    右   左<br>上述各位中某位为1，则表示点位于此坐标区。</p><h3 id="2．区域码裁剪算法"><a href="#2．区域码裁剪算法" class="headerlink" title="2．区域码裁剪算法"></a>2．区域码裁剪算法</h3><p>  对所有直线的端点都建立了区域码之后，就可按区域码判断直线在窗口之内或窗口之外。这可分为如下几种情况：</p><ol><li>若一直线的两个端点的区域码均为0000则此直线在窗口边界之内，应子保留。</li><li>若一直线的两个端点的区域码的同一位同时为1，则此直线全部在窗口边界之外，应子裁剪。<br>例如，若一直线的一个端点的区域码为1001，另一个端点的区域码为0101，则此两端点的区域码的第一位均为1，说明此两端点均在窗口边界之左，<br>因此，直线在窗口边界之外，应予裁剪。可用将直线两个端点的区域码进行“与”（&amp;）操作的方法，判断直线是否在窗口之外，<br>若“与”操作的结果为0000则两端点的区域码任何位均不同时为1，此直线不一定被裁剪。</li><li>以上两种情况之外的直线，有可能穿过窗口，也有可能不穿过窗口。<br>对这类直线可以进行如下处理：取窗口外的一个端点与窗口边界比较以确定可排除直线的哪一部分，<br>然后，把直线剩下的部分与其他边界比较，这样一直到直线全部被排除或确定直线的哪一部分在窗口之内为止。<br>可按“左、右、下、上”的次序建立检查直线端点与窗口边界关系的算法。</li></ol><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*cohen-surtherland.cpp*/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;gl/glut.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LEFT_EDGE 1</span><span class="token macro property">#<span class="token directive keyword">define</span> RIGHT_EDGE 2</span><span class="token macro property">#<span class="token directive keyword">define</span> BOTTOM_EDGE 4</span><span class="token macro property">#<span class="token directive keyword">define</span> TOP_EDGE 8</span><span class="token keyword">void</span> <span class="token function">LineGL</span><span class="token punctuation">(</span><span class="token keyword">int</span> x0<span class="token punctuation">,</span> <span class="token keyword">int</span> y0<span class="token punctuation">,</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">glBegin</span><span class="token punctuation">(</span>GL_LINES<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glColor3f</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glVertex2f</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glColor3f</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glVertex2f</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> Rectangle<span class="token punctuation">{</span>  <span class="token keyword">float</span> xmin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> ymax<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Rectangle rect<span class="token punctuation">;</span><span class="token keyword">int</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">CompCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> Rectangle rect<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> rect<span class="token punctuation">.</span>ymin<span class="token punctuation">)</span>    code <span class="token operator">=</span> code <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">></span>rect<span class="token punctuation">.</span>ymax<span class="token punctuation">)</span>    code <span class="token operator">=</span> code <span class="token operator">|</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">></span>rect<span class="token punctuation">.</span>xmax<span class="token punctuation">)</span>    code <span class="token operator">=</span> code <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;</span>rect<span class="token punctuation">.</span>xmin<span class="token punctuation">)</span>    code <span class="token operator">=</span> code <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">cohensutherlandlineclip</span><span class="token punctuation">(</span>Rectangle rect<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> accept<span class="token punctuation">,</span> done<span class="token punctuation">;</span>  <span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  accept <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  done <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> code0<span class="token punctuation">,</span> code1<span class="token punctuation">,</span> codeout<span class="token punctuation">;</span>  code0 <span class="token operator">=</span> <span class="token function">CompCode</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>  code1 <span class="token operator">=</span> <span class="token function">CompCode</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">do</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>code0 <span class="token operator">|</span> code1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//整条线段在窗口内</span>      accept <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取之</span>      done <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>code0 <span class="token operator">&amp;</span> code1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//两个端点同在窗口一侧，弃之</span>      done <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段与窗口存在交点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>code0 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        codeout <span class="token operator">=</span> code0<span class="token punctuation">;</span>      <span class="token keyword">else</span>        codeout <span class="token operator">=</span> code1<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//求交点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>codeout<span class="token operator">&amp;</span>LEFT_EDGE<span class="token punctuation">)</span><span class="token punctuation">{</span>        y <span class="token operator">=</span> y0 <span class="token operator">+</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y0<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>xmin <span class="token operator">-</span> x0<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>rect<span class="token punctuation">.</span>xmin<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>codeout<span class="token operator">&amp;</span>RIGHT_EDGE<span class="token punctuation">)</span><span class="token punctuation">{</span>        y <span class="token operator">=</span> y0 <span class="token operator">+</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y0<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>xmax <span class="token operator">-</span> x0<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>rect<span class="token punctuation">.</span>xmax<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>codeout<span class="token operator">&amp;</span>BOTTOM_EDGE<span class="token punctuation">)</span><span class="token punctuation">{</span>        x <span class="token operator">=</span> x0 <span class="token operator">+</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x0<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>ymin <span class="token operator">-</span> y0<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y0<span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>rect<span class="token punctuation">.</span>ymin<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>codeout<span class="token operator">&amp;</span>TOP_EDGE<span class="token punctuation">)</span><span class="token punctuation">{</span>        x <span class="token operator">=</span> x0 <span class="token operator">+</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x0<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>ymax <span class="token operator">-</span> y0<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y0<span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>rect<span class="token punctuation">.</span>ymax<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//舍弃在窗口外的部分线段</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>codeout <span class="token operator">==</span> code0<span class="token punctuation">)</span><span class="token punctuation">{</span>        x0 <span class="token operator">=</span> x<span class="token punctuation">;</span> y0 <span class="token operator">=</span> y<span class="token punctuation">;</span>        code0 <span class="token operator">=</span> <span class="token function">CompCode</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        x1 <span class="token operator">=</span> x<span class="token punctuation">;</span> y1 <span class="token operator">=</span> y<span class="token punctuation">;</span>        code1 <span class="token operator">=</span> <span class="token function">CompCode</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accept<span class="token punctuation">)</span>    <span class="token function">LineGL</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span><span class="token punctuation">{</span>    x0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">LineGL</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> accept<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">myDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">glClear</span><span class="token punctuation">(</span>GL_COLOR_BUFFER_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glColor3f</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glRectf</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>xmin<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>ymin<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>xmax<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>ymax<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LineGL</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">glClearColor</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glShadeModel</span><span class="token punctuation">(</span>GL_FLAT<span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span>xmin <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span>xmax <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span>ymin <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span>ymax <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>  x0 <span class="token operator">=</span> <span class="token number">450</span><span class="token punctuation">,</span> y0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y1 <span class="token operator">=</span> <span class="token number">450</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Press key 'c' to Clip!\nPress key 'r' to Restore!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Reshape</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">glViewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>GLsizei<span class="token punctuation">)</span> w<span class="token punctuation">,</span> <span class="token punctuation">(</span>GLsizei<span class="token punctuation">)</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glMatrixMode</span><span class="token punctuation">(</span>GL_PROJECTION<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glLoadIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gluOrtho2D</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>GLdouble<span class="token punctuation">)</span>w<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>GLdouble<span class="token punctuation">)</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">keyboard</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token string">'c'</span><span class="token punctuation">:</span>    <span class="token function">cohensutherlandlineclip</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glutPostRedisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'r'</span><span class="token punctuation">:</span>    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glutPostRedisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'x'</span><span class="token punctuation">:</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">glutInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glutInitDisplayMode</span><span class="token punctuation">(</span>GLUT_RGB <span class="token operator">|</span> GLUT_SINGLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glutInitWindowPosition</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glutInitWindowSize</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span><span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glutCreateWindow</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glutDisplayFunc</span><span class="token punctuation">(</span>myDisplay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glutReshapeFunc</span><span class="token punctuation">(</span>Reshape<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glutKeyboardFunc</span><span class="token punctuation">(</span>keyboard<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glutMainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub博客搭建完全教程</title>
      <link href="/2020/03/21/hexo-github-bo-ke-da-jian-wan-quan-jiao-cheng/"/>
      <url>/2020/03/21/hexo-github-bo-ke-da-jian-wan-quan-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p>$y = f(x)$<br>\[y = {f_{ {g_1}}}(x)\]</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hill密码加密解密</title>
      <link href="/2020/03/20/hill-mi-ma-jia-mi-jie-mi/"/>
      <url>/2020/03/20/hill-mi-ma-jia-mi-jie-mi/</url>
      
        <content type="html"><![CDATA[<h4 id="希尔密码加密解密原理"><a href="#希尔密码加密解密原理" class="headerlink" title="希尔密码加密解密原理:"></a>希尔密码加密解密原理:</h4><p>  希尔密码是运用基本矩阵论原理的替换密码。每个字母当作26进制数字：A=0，B=1…一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果MOD 26。注意用作加密的矩阵（即密钥）必须是可逆的，否则就不可能译码。只有矩阵的行列式和26互质，才是可逆的。</p><h4 id="1、产生随机矩阵，输入明文，产生密文"><a href="#1、产生随机矩阵，输入明文，产生密文" class="headerlink" title="1、产生随机矩阵，输入明文，产生密文"></a>1、产生随机矩阵，输入明文，产生密文</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*Hill密码//*理解算法最重要，最好自己动手实现试试看，可以使用MFC写一个简单的交互界面*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>using namespace std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义一些常变量*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义集合{a,b,...,z}的26个英文字母</span><span class="token comment" spellcheck="true">//行和列均为5</span><span class="token keyword">const</span> <span class="token keyword">int</span> ROW <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> COL <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义5*5的加密矩阵</span><span class="token keyword">int</span> K<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义5*5的解密矩阵</span><span class="token keyword">int</span> D<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> P<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//明文单元</span><span class="token keyword">int</span> C<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//密文单元</span><span class="token keyword">int</span> F<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//密文解密后的单元</span><span class="token comment" spellcheck="true">/*三元组gcd(a,b) = ax + by = d */</span><span class="token keyword">struct</span> GCD<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>class Hill_Cipher<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//产生随机矩阵</span>    <span class="token keyword">void</span> <span class="token function">random_Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求矩阵的行列式</span>    <span class="token keyword">int</span> <span class="token function">Det</span><span class="token punctuation">(</span><span class="token keyword">int</span> matrix<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求两个数的最大公约数</span>    <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     *判断矩阵K是否在模26的情况下可逆     *因为矩阵在模26的情形下存在可逆矩阵的充分必要条件是     *gcd(det K,26) = 1     */</span>    bool <span class="token function">Inverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> matrix<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//矩阵相乘</span>    <span class="token keyword">void</span> <span class="token function">multiphy</span><span class="token punctuation">(</span><span class="token keyword">int</span> matrix<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求出伴随矩阵</span>    <span class="token keyword">void</span> <span class="token function">adjoint_matrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> matrix<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将明文加密为密文</span>    string <span class="token function">encryption</span><span class="token punctuation">(</span>string plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将密文解密为明文(为了辨识清楚,我们统一以小写字母作为明文,大写字母作为密文)</span>    string <span class="token function">deciphering</span><span class="token punctuation">(</span>string ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//欧几里得算法求模的逆</span>    GCD <span class="token function">extended_Euclid</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模逆运算</span>    <span class="token keyword">int</span> <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//由于C++不存在负数取模的内置函数,现在自己设定一个</span>    <span class="token comment" spellcheck="true">//定义一个模M的值</span>    <span class="token keyword">int</span> <span class="token function">Mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">random_Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> COL<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            K<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//产生一个5*5模26的矩阵</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//求矩阵的行列式</span><span class="token keyword">int</span> Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Det</span><span class="token punctuation">(</span><span class="token keyword">int</span> matrix<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">int</span> cofa<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用于存放余子阵</span>    <span class="token keyword">int</span> l<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//l为所递归的余子阵的行</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//由于行和列相同(方阵),所以行列式的值一定存在,故不需要判断是否为方阵</span>    <span class="token comment" spellcheck="true">//递归基</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>l <span class="token operator">&lt;</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>           p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">else</span>           p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>         cofa<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>l <span class="token operator">+</span> p<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//相当于(-1)^i</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>         q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>         q<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     sum <span class="token operator">=</span> sum <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> q <span class="token operator">*</span> <span class="token function">Det</span><span class="token punctuation">(</span>cofa<span class="token punctuation">,</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//求两个数的最大公约数</span><span class="token keyword">int</span> Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//交换两个数的大小,使得a为较大数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> a<span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>        a <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* *判断矩阵K是否在模26的情况下可逆 *因为矩阵在模26的情形下存在可逆矩阵的充分必要条件是 *gcd(det K,26) = 1 */</span>bool Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Inverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> matrix<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token function">Det</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>ROW<span class="token punctuation">)</span><span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">multiphy</span><span class="token punctuation">(</span><span class="token keyword">int</span> matrix<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先将密文单元清零</span>    <span class="token function">memset</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> P<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> K<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将明文加密为密文</span>string Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">encryption</span><span class="token punctuation">(</span>string plaintext<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    string ciphertext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将字符串转化为明文数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> plaintext<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">multiphy</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span>P<span class="token punctuation">,</span>ROW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将密文数组转化为密文</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//这里先将其模26,再翻译为对应的字母</span>    <span class="token punctuation">{</span>        C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token function">Mod</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ciphertext <span class="token operator">+</span><span class="token operator">=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ciphertext<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//求出伴随矩阵</span><span class="token keyword">void</span> Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">adjoint_matrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> matrix<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>l<span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    p <span class="token operator">=</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> ROW <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>                    p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>l <span class="token operator">&lt;</span> ROW <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                        q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>k<span class="token operator">+</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">+</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            D<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Det</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>ROW<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            D<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Mod</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将密文解密为明文(为了辨识清楚,我们统一以小写字母作为明文,大写字母作为密文)</span>string Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">deciphering</span><span class="token punctuation">(</span>string ciphertext<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//求出矩阵的逆</span>    string text<span class="token punctuation">;</span>    <span class="token keyword">int</span> determinant <span class="token operator">=</span> <span class="token function">Det</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span>ROW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> inver <span class="token operator">=</span> <span class="token function">inverse</span><span class="token punctuation">(</span>determinant<span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">adjoint_matrix</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span>ROW<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//伴随矩阵</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"行列式的值: "</span> <span class="token operator">&lt;&lt;</span> determinant <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>F<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            F<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> C<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> D<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        F<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> inver<span class="token punctuation">;</span>        F<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Mod</span><span class="token punctuation">(</span>F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//算到的结果要模去26</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        text <span class="token operator">+</span><span class="token operator">=</span> F<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> text<span class="token punctuation">;</span><span class="token punctuation">}</span>GCD Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">extended_Euclid</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    GCD aa<span class="token punctuation">,</span>bb<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        aa<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        aa<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        aa<span class="token punctuation">.</span>d <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">return</span> aa<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        bb <span class="token operator">=</span> <span class="token function">extended_Euclid</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        aa<span class="token punctuation">.</span>x <span class="token operator">=</span> bb<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        aa<span class="token punctuation">.</span>y <span class="token operator">=</span> bb<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> bb<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        aa<span class="token punctuation">.</span>d <span class="token operator">=</span> bb<span class="token punctuation">.</span>d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> aa<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    GCD aa<span class="token punctuation">;</span>    aa <span class="token operator">=</span> <span class="token function">extended_Euclid</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> aa<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Hill_Cipher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">%</span> M <span class="token punctuation">:</span> <span class="token punctuation">(</span>M <span class="token operator">+</span> a <span class="token operator">%</span> M<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    Hill_Cipher hh<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"使用希尔密码进行消息的加解密:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//srand()函数产生一个以当前时间开始的随机种子.以保证每次产生的随机数矩阵都不相同</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hh<span class="token punctuation">.</span><span class="token function">random_Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>hh<span class="token punctuation">.</span><span class="token function">Inverse</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        hh<span class="token punctuation">.</span><span class="token function">random_Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"随机产生5*5的矩阵:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> COL<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d  "</span><span class="token punctuation">,</span>K<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该矩阵模26可逆,因此可以作为密钥."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//利用所选密钥，对给定的5元明文信息进行加解密</span>    string plaintext<span class="token punctuation">,</span>ciphertext<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入5元明文信息:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> plaintext<span class="token punctuation">;</span>    ciphertext <span class="token operator">=</span> hh<span class="token punctuation">.</span><span class="token function">encryption</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该明文通过希尔密码法加密过后,输出的密文消息为:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ciphertext <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入0:退出          ***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入1:查看明文空间对***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入2:查看密文空间对***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入3:查看密钥      ***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入4:将消息解密    ***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入5:查看菜单      ***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> c<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"退出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"明文空间:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"密文空间:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"密钥:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d  "</span><span class="token punctuation">,</span>K<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            hh<span class="token punctuation">.</span><span class="token function">adjoint_matrix</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span>ROW<span class="token punctuation">)</span><span class="token punctuation">;</span>            string ss<span class="token punctuation">;</span>            ss <span class="token operator">=</span> hh<span class="token punctuation">.</span><span class="token function">deciphering</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该密文解密过后,显示的原来的明文消息:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> ss <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入0:退出          ***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入1:查看明文空间对***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入2:查看密文空间对***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入3:查看密钥      ***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入4:将消息解密    ***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***输入5:查看菜单      ***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2、输入密钥矩阵，输入明文，产生密文"><a href="#2、输入密钥矩阵，输入明文，产生密文" class="headerlink" title="2、输入密钥矩阵，输入明文，产生密文"></a>2、输入密钥矩阵，输入明文，产生密文</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">define</span> N 100</span>using namespace std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按第一列展开，递归计算行列式值</span><span class="token keyword">int</span> <span class="token function">caluDet</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>det <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        det<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> r<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//子矩阵 (n-1) 行</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>i<span class="token punctuation">)</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//当前行 a[r] 赋值给子矩阵</span>            <span class="token keyword">else</span>    p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//下一行 a[r+1] 赋值给子矩阵</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> c<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//子矩阵 (n-1) 列</span>                det<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>r<span class="token operator">+</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//由于是对第一列展开，即 [i][0]</span>        <span class="token keyword">else</span> q <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> q<span class="token operator">*</span><span class="token function">caluDet</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span>det<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>det<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>det<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化明文</span><span class="token keyword">void</span> <span class="token function">initPlain</span><span class="token punctuation">(</span><span class="token keyword">char</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> len<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入明文p: \n"</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">gets</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//跳过空格</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">,</span>p<span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//小写转大写</span>            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> len<span class="token operator">%</span>n<span class="token operator">></span><span class="token number">0</span> <span class="token operator">?</span> n<span class="token operator">-</span>len<span class="token operator">%</span>n <span class="token punctuation">:</span> len<span class="token operator">%</span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//若最后一个明文对字母不足，则添加与最后一个明文相同的字母</span>        p<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"\nInit P: "</span> <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输入密钥矩阵</span><span class="token keyword">void</span> <span class="token function">keyMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>det<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> det<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//分组、矩阵乘法</span><span class="token keyword">void</span> <span class="token function">matricMultiply</span><span class="token punctuation">(</span><span class="token keyword">char</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//明文每 n 个作为一行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//明文的列、密钥矩阵的列</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//密钥矩阵的行</span>                c<span class="token punctuation">[</span>n<span class="token operator">*</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>n<span class="token operator">*</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">*</span> key<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            c<span class="token punctuation">[</span>n<span class="token operator">*</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>n<span class="token operator">*</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout &lt;&lt; (int)c[n*i+j] &lt;&lt; " ";</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cipher: "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">,</span> len<span class="token punctuation">;</span>    <span class="token keyword">char</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入密钥的阶：\n"</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为密钥矩阵申请内存空间</span>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取密钥矩阵并验证是否可逆</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入"</span> <span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">"阶密钥矩阵：\n"</span><span class="token punctuation">;</span>    <span class="token function">keyMatrix</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">caluDet</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"密钥不存在逆矩阵! 请重新输入：\n"</span><span class="token punctuation">;</span>        <span class="token function">keyMatrix</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化明文</span>    <span class="token function">initPlain</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//各组明文乘密钥矩阵加密</span>    <span class="token function">matricMultiply</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> c<span class="token punctuation">,</span> key<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//释放密钥矩阵的内存空间</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OpenGL】Sierpinski 镂垫程序</title>
      <link href="/2020/03/19/opengl-sierpinski-lou-dian-cheng-xu/"/>
      <url>/2020/03/19/opengl-sierpinski-lou-dian-cheng-xu/</url>
      
        <content type="html"><![CDATA[<p>  Sierpinski镂垫是一个非常有趣的图案，有着悠久的历史， 在分形几何中等领域里引起了人们极大地兴趣， 是用递归和随机方式定义的几何形状。生成算法如下：<br>  第一步：在三角形内部随机选取一个点作为初始点；<br>  第二步：在三角形的3个顶点中随机选取一个，求出该顶点与初始点连线的中点，画出该中点；<br>  第三步：将第二步中的中点作为初始点，循环第二步；</p><h4 id="1、绘制二维Sierpinski镂垫"><a href="#1、绘制二维Sierpinski镂垫" class="headerlink" title="1、绘制二维Sierpinski镂垫"></a>1、绘制二维Sierpinski镂垫</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*使用随机选择的顶点和中点绘制二维Sierpinski镂垫*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;GL/glut.h></span></span><span class="token keyword">void</span> <span class="token function">myinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">glClearColor</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*白色背景*/</span>  <span class="token function">glColor3f</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*红色*/</span>  <span class="token function">glMatrixMode</span><span class="token punctuation">(</span>GL_PROJECTION<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glLoadIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gluOrtho2D</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">50.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">50.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*50×50相机坐标窗口与原点左下角*/</span>  <span class="token function">glMatrixMode</span><span class="token punctuation">(</span>GL_MODELVIEW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  GLfloat vertices<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">25.0</span><span class="token punctuation">,</span><span class="token number">50.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">50.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*产生随机数*/</span>  GLfloat p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">7.5</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*在三角形内任意初始点*/</span>  <span class="token function">glClear</span><span class="token punctuation">(</span>GL_COLOR_BUFFER_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*清理窗口*/</span>  <span class="token function">glBegin</span><span class="token punctuation">(</span>GL_POINTS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*产生5000个新点*/</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">5000</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    j<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*随机选择一个顶点*/</span>    <span class="token comment" spellcheck="true">/*计算点位于选定顶点和旧点之间*/</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>vertices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>vertices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*画新点*/</span>    <span class="token function">glVertex2fv</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">glEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*清除缓冲帧*/</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">glutInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*标准的GLUT初始化*/</span>  <span class="token function">glutInitDisplayMode</span><span class="token punctuation">(</span>GLUT_SINGLE <span class="token operator">|</span> GLUT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*默认设置*/</span>  <span class="token function">glutInitWindowSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*500×500像素窗口*/</span>  <span class="token function">glutInitWindowPosition</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将窗口放在左下角*/</span>  <span class="token function">glutCreateWindow</span><span class="token punctuation">(</span><span class="token string">"Sierpinski Gasket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*窗口名*/</span>  <span class="token function">glutDisplayFunc</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*窗口打开时调用的显示回调*/</span>  <span class="token function">myinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置属性*/</span>  <span class="token function">glutMainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*进入事件循环*/</span><span class="token punctuation">}</span></code></pre><h4 id="2、生成-Sierpinski-镂垫的递归程序"><a href="#2、生成-Sierpinski-镂垫的递归程序" class="headerlink" title="2、生成 Sierpinski 镂垫的递归程序"></a>2、生成 Sierpinski 镂垫的递归程序</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 通过细分三角形的方法生成Sierpinski镂垫 */</span><span class="token comment" spellcheck="true">/* 通过命令行输入递归的次数 */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;GL/glut.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token comment" spellcheck="true">/* 初始的三角形 */</span>GLfloat v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.58</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.58</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.15</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">triangle</span><span class="token punctuation">(</span> GLfloat <span class="token operator">*</span>a<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>b<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 定义某个三角形 */</span><span class="token punctuation">{</span> <span class="token function">glVertex2fv</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glVertex2fv</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glVertex2fv</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">divide_triangle</span><span class="token punctuation">(</span>GLfloat <span class="token operator">*</span>a<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>b<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 基于某个顶点的数量对三角形进行细分处理 */</span> GLfloat v0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> v0<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> v1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">divide_triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> v0<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">divide_triangle</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">divide_triangle</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v0<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归结束时绘制三角形 */</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">glClear</span><span class="token punctuation">(</span>GL_COLOR_BUFFER_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">glBegin</span><span class="token punctuation">(</span>GL_TRIANGLES<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">divide_triangle</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">glEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">myinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">glMatrixMode</span><span class="token punctuation">(</span>GL_PROJECTION<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glLoadIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">gluOrtho2D</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glMatrixMode</span><span class="token punctuation">(</span>GL_MODELVIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glClearColor</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glColor3f</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>     n<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 或者在此输入三角形细分的步数 */</span>     <span class="token function">glutInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glutInitDisplayMode</span><span class="token punctuation">(</span>GLUT_SINGLE <span class="token operator">|</span> GLUT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glutInitWindowSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glutCreateWindow</span><span class="token punctuation">(</span><span class="token string">"Sierpinski Gasket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glutDisplayFunc</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">myinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glutMainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3、三维-Sierpinski-镂垫的递归程序"><a href="#3、三维-Sierpinski-镂垫的递归程序" class="headerlink" title="3、三维 Sierpinski 镂垫的递归程序"></a>3、三维 Sierpinski 镂垫的递归程序</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 通过递归细分四面体方法生成Sierpinski镂垫 */</span><span class="token comment" spellcheck="true">/* 通过命令行递归的次数 */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;GL/glut.h></span></span><span class="token comment" spellcheck="true">/* 初始的四面体 */</span>GLfloat v<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.942809</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.33333</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">0.816497</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.471405</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.333333</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0.816497</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.471405</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.333333</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>GLfloat colors<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">triangle</span><span class="token punctuation">(</span> GLfloat <span class="token operator">*</span>va<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>vb<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>vc<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">glVertex3fv</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glVertex3fv</span><span class="token punctuation">(</span>vb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glVertex3fv</span><span class="token punctuation">(</span>vc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tetra</span><span class="token punctuation">(</span>GLfloat <span class="token operator">*</span>a<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>b<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>c<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">glColor3fv</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glColor3fv</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glColor3fv</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>d<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glColor3fv</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">triangle</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>d<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">divide_tetra</span><span class="token punctuation">(</span>GLfloat <span class="token operator">*</span>a<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>b<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>c<span class="token punctuation">,</span> GLfloat <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span> GLfloat mid<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 计算六个中点 */</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> mid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> mid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> mid<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> mid<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> mid<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> mid<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 通过细分生成四个四面体 */</span> <span class="token function">divide_tetra</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">divide_tetra</span><span class="token punctuation">(</span>mid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">divide_tetra</span><span class="token punctuation">(</span>mid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">divide_tetra</span><span class="token punctuation">(</span>mid<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span>   <span class="token function">tetra</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归结束时绘制四面体 */</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">glClear</span><span class="token punctuation">(</span>GL_COLOR_BUFFER_BIT <span class="token operator">|</span> GL_DEPTH_BUFFER_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glBegin</span><span class="token punctuation">(</span>GL_TRIANGLES<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">divide_tetra</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">myReshape</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">glViewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glMatrixMode</span><span class="token punctuation">(</span>GL_PROJECTION<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glLoadIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">&lt;=</span> h<span class="token punctuation">)</span>     <span class="token function">glOrtho</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> h <span class="token operator">/</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> w<span class="token punctuation">,</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> h <span class="token operator">/</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> w<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span>     <span class="token function">glOrtho</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> w <span class="token operator">/</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> h<span class="token punctuation">,</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> w <span class="token operator">/</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glMatrixMode</span><span class="token punctuation">(</span>GL_MODELVIEW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glutPostRedisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span> n<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 或者在此处输入四面体细分的步数 */</span> <span class="token function">glutInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glutInitDisplayMode</span><span class="token punctuation">(</span>GLUT_SINGLE <span class="token operator">|</span> GLUT_RGB <span class="token operator">|</span> GLUT_DEPTH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glutInitWindowSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glutCreateWindow</span><span class="token punctuation">(</span><span class="token string">"3D Gasket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glutReshapeFunc</span><span class="token punctuation">(</span>myReshape<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glutDisplayFunc</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glEnable</span><span class="token punctuation">(</span>GL_DEPTH_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glClearColor</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glutMainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OpenGL】球体的细分逼近程序</title>
      <link href="/2020/03/18/opengl-qiu-ti-de-xi-fen-bi-jin-cheng-xu/"/>
      <url>/2020/03/18/opengl-qiu-ti-de-xi-fen-bi-jin-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="球体的细分逼近程序"><a href="#球体的细分逼近程序" class="headerlink" title="球体的细分逼近程序"></a>球体的细分逼近程序</h2><ol><li>通过递归细分四面体生成球体，三种显示模式：线性框、均匀着色，插值着色</li></ol><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 该程序在init()函数中还定义了材质和光源 */</span><span class="token comment" spellcheck="true">/* mode 0 = 线性框, mode 1 = 均与着色,mode 3 = 插值着色 */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;GL/glut.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">float</span> point<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 初始化四面体 */</span>point v<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.942809</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.33333</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">0.816497</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.471405</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.333333</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0.816497</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.471405</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.333333</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>GLfloat theta<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> mode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">triangle</span><span class="token punctuation">(</span> point a<span class="token punctuation">,</span> point b<span class="token punctuation">,</span> point c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*利用GL_LINR_LOOP模式显示一个三角形的线性图，定义一个法向量用于均匀着色，定义三个法向量用于插值着色*/</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token function">glBegin</span><span class="token punctuation">(</span>GL_LINE_LOOP<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span>  <span class="token function">glBegin</span><span class="token punctuation">(</span>GL_POLYGON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">glNormal3fv</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">glNormal3fv</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">glVertex3fv</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">glNormal3fv</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glVertex3fv</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">glNormal3fv</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glVertex3fv</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">normal</span><span class="token punctuation">(</span>point p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 矢量归一化 */</span><span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> d <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> d <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">></span> <span class="token number">0.0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">divide_triangle</span><span class="token punctuation">(</span>point a<span class="token punctuation">,</span> point b<span class="token punctuation">,</span> point c<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 基于顶点数目细分三角形，应用右手规则生成对象的外向表面 */</span> point v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">;</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> v1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">normal</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">normal</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> v3<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">normal</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">divide_triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">divide_triangle</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">divide_triangle</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">divide_triangle</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归结束时绘制三角形 */</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tetrahedron</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 对四面体的表面应用三角细分 */</span> <span class="token function">divide_triangle</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">divide_triangle</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">divide_triangle</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">divide_triangle</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 逐一显示这三种模式下的四面体 */</span> <span class="token function">glClear</span><span class="token punctuation">(</span>GL_COLOR_BUFFER_BIT <span class="token operator">|</span> GL_DEPTH_BUFFER_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glLoadIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">tetrahedron</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> mode<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">glTranslatef</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">tetrahedron</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> mode<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">glTranslatef</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">tetrahedron</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">myReshape</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">glViewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glMatrixMode</span><span class="token punctuation">(</span>GL_PROJECTION<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glLoadIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">&lt;=</span> h<span class="token punctuation">)</span>    <span class="token function">glOrtho</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> h <span class="token operator">/</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> w<span class="token punctuation">,</span>        <span class="token number">4.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> h <span class="token operator">/</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> w<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span>    <span class="token function">glOrtho</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> w <span class="token operator">/</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> h<span class="token punctuation">,</span>        <span class="token number">4.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> w <span class="token operator">/</span> <span class="token punctuation">(</span>GLfloat<span class="token punctuation">)</span> h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">glMatrixMode</span><span class="token punctuation">(</span>GL_MODELVIEW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">myinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GLfloat mat_specular<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    GLfloat mat_diffuse<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    GLfloat mat_ambient<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    GLfloat mat_shininess<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">100.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    GLfloat light_ambient<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    GLfloat light_diffuse<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    GLfloat light_specular<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 为光源0分别设置环境光、漫反射光和镜面反射光的参数 */</span>    <span class="token function">glLightfv</span><span class="token punctuation">(</span>GL_LIGHT0<span class="token punctuation">,</span> GL_AMBIENT<span class="token punctuation">,</span> light_ambient<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glLightfv</span><span class="token punctuation">(</span>GL_LIGHT0<span class="token punctuation">,</span> GL_DIFFUSE<span class="token punctuation">,</span> light_diffuse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glLightfv</span><span class="token punctuation">(</span>GL_LIGHT0<span class="token punctuation">,</span> GL_SPECULAR<span class="token punctuation">,</span> light_specular<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 为所有三角形正面定义材质属性 */</span>    <span class="token function">glMaterialfv</span><span class="token punctuation">(</span>GL_FRONT<span class="token punctuation">,</span> GL_SPECULAR<span class="token punctuation">,</span> mat_specular<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glMaterialfv</span><span class="token punctuation">(</span>GL_FRONT<span class="token punctuation">,</span> GL_AMBIENT<span class="token punctuation">,</span> mat_ambient<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glMaterialfv</span><span class="token punctuation">(</span>GL_FRONT<span class="token punctuation">,</span> GL_DIFFUSE<span class="token punctuation">,</span> mat_diffuse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glMaterialf</span><span class="token punctuation">(</span>GL_FRONT<span class="token punctuation">,</span> GL_SHININESS<span class="token punctuation">,</span> mat_shininess<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glShadeModel</span><span class="token punctuation">(</span>GL_SMOOTH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 开启平滑着色 */</span>    <span class="token function">glEnable</span><span class="token punctuation">(</span>GL_LIGHTING<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 开启光照 */</span>    <span class="token function">glEnable</span><span class="token punctuation">(</span>GL_LIGHT0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 开启光源0 */</span>    <span class="token function">glEnable</span><span class="token punctuation">(</span>GL_DEPTH_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 开启z-buffer */</span>    <span class="token function">glClearColor</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glColor3f</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n=1,2,3,4,5,6……</span>  <span class="token comment" spellcheck="true">//n=atoi(argv[1]);//直接运行会出错，具体参照BookCode的此处源码处理方案</span>    <span class="token function">glutInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glutInitDisplayMode</span><span class="token punctuation">(</span>GLUT_SINGLE <span class="token operator">|</span> GLUT_RGB <span class="token operator">|</span> GLUT_DEPTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glutInitWindowSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glutCreateWindow</span><span class="token punctuation">(</span><span class="token string">"sphere"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">myinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glutReshapeFunc</span><span class="token punctuation">(</span>myReshape<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glutDisplayFunc</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">glutMainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】Git和Node.js重新安装</title>
      <link href="/2020/03/17/git-git-he-node-js-chong-xin-an-zhuang/"/>
      <url>/2020/03/17/git-git-he-node-js-chong-xin-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Git和Node-js重新安装"><a href="#Git和Node-js重新安装" class="headerlink" title="Git和Node.js重新安装"></a>Git和Node.js重新安装</h1><h2 id="1、Git安装教程"><a href="#1、Git安装教程" class="headerlink" title="1、Git安装教程"></a>1、Git安装教程</h2><h3 id="1-1下载地址：https-git-scm-com-downloads"><a href="#1-1下载地址：https-git-scm-com-downloads" class="headerlink" title="1.1下载地址：https://git-scm.com/downloads"></a>1.1下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></h3><h3 id="1-2安装步骤："><a href="#1-2安装步骤：" class="headerlink" title="1.2安装步骤："></a>1.2安装步骤：</h3><ul><li>点击next</li><li>根据自己想安装软件的位置来选择路径(我这里选择的是D:\blog)</li><li>安装配置文件，自己需要选择</li><li>不创建启动文件夹（勾选Don’t create a Star Menu folder）</li><li>选择默认编辑器</li><li>点击Next(Git from the command…)</li><li>使用默认设置就行(use the OpenSSL libuary)</li><li>默认(Checkout Windows-style,…)</li><li>在终端模拟器选择页面，默认即可，配置后Git</li><li>1最后配置Git额外选择默认安装</li><li>1安装完成（鼠标右键出现Git GUI Here和Git Bash Here）</li></ul><h2 id="2、Node-js安装"><a href="#2、Node-js安装" class="headerlink" title="2、Node.js安装"></a>2、Node.js安装</h2><h3 id="2-1下载地址：：https-nodejs-org-en-download"><a href="#2-1下载地址：：https-nodejs-org-en-download" class="headerlink" title="2.1下载地址：：https://nodejs.org/en/download/"></a>2.1下载地址：：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></h3><h3 id="2-2安装步骤"><a href="#2-2安装步骤" class="headerlink" title="2.2安装步骤:"></a>2.2安装步骤:</h3><ul><li>下载完成后，开始安装</li><li>接受协议</li><li>根据自己要安装的地方选择安装目录(我这里选择D:\blog\node.js路径下)</li><li>选择安装项，一般默认</li><li>点击“Install”按钮，开始安装，完成安装</li><li>检验：<ol><li>node -v 查看 node 版本</li><li>npm -v 查看 npm 版本</li></ol></li></ul><h2 id="3、环境配置"><a href="#3、环境配置" class="headerlink" title="3、环境配置"></a>3、环境配置</h2><ul><li>设置环境变量，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”</li><li>在用户变量里选择Path，点击新建，在弹出的框中点击新建，然后在其中添加D:\blog\Node.js\node_modules</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】Git常见报错及处理方法</title>
      <link href="/2020/03/16/git-git-chang-jian-bao-cuo-ji-chu-li-fang-fa/"/>
      <url>/2020/03/16/git-git-chang-jian-bao-cuo-ji-chu-li-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="Git常见报错及处理方法"><a href="#Git常见报错及处理方法" class="headerlink" title="Git常见报错及处理方法"></a>Git常见报错及处理方法</h2><h3 id="Fatal-remote-origin-already-exists"><a href="#Fatal-remote-origin-already-exists" class="headerlink" title="Fatal:remote origin already exists."></a>Fatal:remote origin already exists.</h3><p><strong>如果输入<code>$ git remote add origin git@github.com:gkm0120（github帐号名）/gitdemo（项目名）.git</code><br>提示出错信息：<code>fatal: remote origin already exists</code>.解决办法如下</strong>：</p><ol><li>先输入<code>$ git remote rm origin</code></li><li>再输入<code>$ git remote add origin git@github.com:gkm0120/gkm0120.github.io.git</code> 就不会报错了！</li><li>若输入<code>$ git remote rm origin</code> 还是报错的话，error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容</li><li>找到你的github的安装路径，我的是C:/Users/gkm0120/.git</li><li>找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！</li></ol><h3 id="Permission-denied-publickey"><a href="#Permission-denied-publickey" class="headerlink" title="Permission denied (publickey)"></a>Permission denied (publickey)</h3><p><strong>如果输入<code>$ ssh -T git@github.com</code>出现错误提示：Permission denied (publickey).因为新生成的key不能加入ssh就会导致连接不上github。解决办法如下</strong>：</p><ol><li>先输入<code>$ ssh-agent</code>，再输入$ ssh-add ~/.ssh/id_key，这样就可以了。</li><li>如果还是不行的话，输入ssh-add ~/.ssh/id_key 命令后出现报错Could not open a connection to your authentication agent.解决方法是key用Git Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。</li><li>最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。</li></ol><h3 id="Error-failed-to-push-some-refs-to…"><a href="#Error-failed-to-push-some-refs-to…" class="headerlink" title="Error: failed to push some refs to…"></a>Error: failed to push some refs to…</h3><p><strong>如果输入<code>$ git push origin master</code>提示出错信息：error: failed to push some refs to ‘git@github.com:gkm0120/-.git’错误分析：本地没有update到最新版本的项目（git上有README.md文件没下载下来）、本地直接push所以会出错。<br>解决办法如下（两种）</strong>：</p><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>输入 <code>$ git pull --rebase origin master</code>……显示一串拉代码的英文，此时已经把github上最新的文件，然后在输入git push origin master,即可成功把本地的文件都上传到github上面去了，<code>$ git push origin master</code></p><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><ol><li>先输入<code>$ git pull origin master</code> //先把远程服务器github上面的文件拉下来</li><li>再输入<code>$ git push origin master</code></li><li>如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository.</li><li>则需要重新输入<code>$ git remote add origin git@github.com:gkm0120/gkm0120.github.io.git</code><br>使用git在本地创建一个项目的过程</li></ol><ul><li>$ makdir ~/hello-world //创建一个项目hello-world</li><li>$ cd ~/hello-world  //打开这个项目</li><li>$ git init //初始化</li><li>$ git add README //更新README文件</li><li>$ git commit -m ‘first commit’ //提交更新，并注释信息“first commit”</li><li>$ git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:gkm0120/gkm0120.github.io.git //连接远程github项目</li><li>$ git push -u origin master //将本地项目更新到github项目上去</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/Umbrella_Um/article/details/97271486" target="_blank" rel="noopener">https://blog.csdn.net/Umbrella_Um/article/details/97271486</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建属于自己的Hexo+GitHub博客</title>
      <link href="/2020/03/15/da-jian-shu-yu-zi-ji-de-hexo-github-bo-ke/"/>
      <url>/2020/03/15/da-jian-shu-yu-zi-ji-de-hexo-github-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="一、node安装"><a href="#一、node安装" class="headerlink" title="一、node安装"></a>一、node安装</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=24897960&amp;cid=42007944&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><hr><h3 id="bilibili链接"><a href="#bilibili链接" class="headerlink" title="bilibili链接"></a>bilibili链接</h3><p><a href="https://www.bilibili.com/video/av24897960/" target="_blank" rel="noopener">https://www.bilibili.com/video/av24897960/</a></p><h2 id="二、github注册"><a href="#二、github注册" class="headerlink" title="二、github注册"></a>二、github注册</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=24897960&amp;cid=42007695&amp;page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><hr><h3 id="bilibili链接-1"><a href="#bilibili链接-1" class="headerlink" title="bilibili链接"></a>bilibili链接</h3><p><a href="https://www.bilibili.com/video/av24897960/?p=2" target="_blank" rel="noopener">https://www.bilibili.com/video/av24897960/?p=2</a></p><h2 id="三、gitforwin安装"><a href="#三、gitforwin安装" class="headerlink" title="三、gitforwin安装"></a>三、gitforwin安装</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=24897960&amp;cid=42007693&amp;page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><hr><h3 id="bilibili链接-2"><a href="#bilibili链接-2" class="headerlink" title="bilibili链接"></a>bilibili链接</h3><p><a href="https://www.bilibili.com/video/av24897960/?p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/av24897960/?p=3</a></p><h2 id="四、githubSHH配置"><a href="#四、githubSHH配置" class="headerlink" title="四、githubSHH配置"></a>四、githubSHH配置</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=24897960&amp;cid=42007735&amp;page=4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><hr><h3 id="bilibili链接-3"><a href="#bilibili链接-3" class="headerlink" title="bilibili链接"></a>bilibili链接</h3><p><a href="https://www.bilibili.com/video/av24897960/?p=4" target="_blank" rel="noopener">https://www.bilibili.com/video/av24897960/?p=4</a></p><h2 id="五、hexo本地使用"><a href="#五、hexo本地使用" class="headerlink" title="五、hexo本地使用"></a>五、hexo本地使用</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=24897960&amp;cid=42007773&amp;page=5" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><hr><h3 id="bilibili链接-4"><a href="#bilibili链接-4" class="headerlink" title="bilibili链接"></a>bilibili链接</h3><p><a href="https://www.bilibili.com/video/av24897960/?p=5" target="_blank" rel="noopener">https://www.bilibili.com/video/av24897960/?p=5</a></p><h2 id="六、sublime安装"><a href="#六、sublime安装" class="headerlink" title="六、sublime安装"></a>六、sublime安装</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=24897960&amp;cid=42008078&amp;page=6" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><hr><h3 id="bilibili链接-5"><a href="#bilibili链接-5" class="headerlink" title="bilibili链接"></a>bilibili链接</h3><p><a href="https://www.bilibili.com/video/av24897960/?p=6" target="_blank" rel="noopener">https://www.bilibili.com/video/av24897960/?p=6</a></p><h2 id="七、hexo发布到github"><a href="#七、hexo发布到github" class="headerlink" title="七、hexo发布到github"></a>七、hexo发布到github</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=24897960&amp;cid=42007849&amp;page=7" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><hr><h3 id="bilibili链接-6"><a href="#bilibili链接-6" class="headerlink" title="bilibili链接"></a>bilibili链接</h3><p><a href="https://www.bilibili.com/video/av24897960/?p=7" target="_blank" rel="noopener">https://www.bilibili.com/video/av24897960/?p=7</a></p><h2 id="八、hexo主题预览"><a href="#八、hexo主题预览" class="headerlink" title="八、hexo主题预览"></a>八、hexo主题预览</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=24897960&amp;cid=42007872&amp;page=8" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><hr><h3 id="bilibili链接-7"><a href="#bilibili链接-7" class="headerlink" title="bilibili链接"></a>bilibili链接</h3><p><a href="https://www.bilibili.com/video/av24897960/?p=8" target="_blank" rel="noopener">https://www.bilibili.com/video/av24897960/?p=8</a></p><h2 id="九、hexo主题使用"><a href="#九、hexo主题使用" class="headerlink" title="九、hexo主题使用"></a>九、hexo主题使用</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=24897960&amp;cid=42007766&amp;page=9" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><hr><h3 id="bilibili链接-8"><a href="#bilibili链接-8" class="headerlink" title="bilibili链接"></a>bilibili链接</h3><p><a href="https://www.bilibili.com/video/av24897960/?p=9" target="_blank" rel="noopener">https://www.bilibili.com/video/av24897960/?p=9</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
